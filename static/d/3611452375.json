{"data":{"allMdx":{"nodes":[{"id":"0576a0c0-dd1e-5124-b886-d2697449ed1c","frontmatter":{"title":"SoftWire Systems","startDate":"FEB 18","endDate":"JUL 19"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/work/softwire\",\n  \"title\": \"SoftWire Systems\",\n  \"startDate\": \"FEB 18\",\n  \"endDate\": \"JUL 19\",\n  \"type\": \"work-experience\",\n  \"domain\": \"robotics\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I worked on a number of mechatronics projects to deliver solutions for\\nindustrial automation. As one example, this involved crafting automation\\nweb-services and processes that integrated into production lines to help\\nretrieve and print labels.\"), mdx(\"p\", null, \"I developed the firmware for a data-collection device for wheelchairs which was\\nshown at CES2019. The device acts as a 'FitBit' for wheelchair users and\\ncollects GPS-tagged data from an onboard INS sensor. Using proprietary\\nalgorithms, we can use this raw data to dedue effort metrics around the users\\nstroke efficiency. A high-level use case for this device has been speeding up\\ndata collection for many Australian councils who use our generated reports to\\nautomatically and accurately assess the accessibility of various public spaces.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},{"id":"c35e033f-ce3a-5cf5-9325-02a35b44eb25","frontmatter":{"title":"NXTGEN Industries","startDate":"FEB 20","endDate":"CURRENT"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"path\": \"/work/nxtgen\",\n  \"title\": \"NXTGEN Industries\",\n  \"startDate\": \"FEB 20\",\n  \"endDate\": \"CURRENT\",\n  \"type\": \"work-experience\",\n  \"domain\": \"robotics\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"For a robotics startup, I deliver solutions for dashboards and human-machine\\ninterfaces with modern web-technologies while also developing low level drivers\\nand packages for robots. We provide value by designing robust and intelligent\\nsolutions for exploration, data-collection and process automation.\"), mdx(\"p\", null, \"To drive efforts around monorepo management and focusing on the reusability of\\ncode modules, I am developing a set of tools to manage, test and deploy our\\ncodebase which shares React/Typescript packages, ROS/C++ packages and Python\\nscripts. The aim is to leverage containerisation and a flexible versioning\\nscheme to encourage confident and reliable reuse of our core technologies and\\nsoftware across multiple projects.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}]}}}